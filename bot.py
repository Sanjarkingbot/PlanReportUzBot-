from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters, ConversationHandler
)
from apscheduler.schedulers.background import BackgroundScheduler
from openpyxl import Workbook, load_workbook
from datetime import datetime
import os
import asyncio
import re

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID"))

keyboard = [
    [KeyboardButton("üóì –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"), KeyboardButton("üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç")],
    [KeyboardButton("üóï –û—Ç—á—ë—Ç—ã –ø–æ –¥–∞—Ç–µ"), KeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É")],
    [KeyboardButton("üìÇ –®–∞–±–ª–æ–Ω –æ—Ç—á—ë—Ç–∞")]
]
reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

TYPING_PLAN = 1

user_states = {}

def get_excel():
    file_name = "reports.xlsx"
    if not os.path.exists(file_name):
        wb = Workbook()
        ws = wb.active
        ws.append(["–î–∞—Ç–∞", "–ò–º—è", "Username", "–¢–∏–ø", "‚Ññ", "–ó–∞–¥–∞—á–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])
        wb.save(file_name)
    return file_name

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.",
        reply_markup=reply_markup
    )

async def plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_states[user_id] = "–ü–õ–ê–ù"
    await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ü–õ–ê–ù –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "üìÑ –®–∞–±–ª–æ–Ω –ø–ª–∞–Ω–∞ –Ω–∞ 2025-06-17:\n\n"
        "1. –ó–∞–¥–∞—á–∞\n"
        "‚Äî –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å\n\n"
        "2. –ó–∞–¥–∞—á–∞\n"
        "‚Äî –ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –¥–æ—Å—Ç–∏—á—å\n\n"
        "üîÅ –ü—Ä–∏–º–µ—Ä:\n"
        "1. –í—Å—Ç—Ä–µ—á–∞ —Å –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–º\n"
        "‚Äî –û–±—Å—É–¥–∏—Ç—å —ç—Ç–∞–ø—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è\n\n"
        "2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
        "‚Äî –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–∞–∫–µ—Ç –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
    return TYPING_PLAN

async def template(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìÇ –®–∞–±–ª–æ–Ω –æ—Ç—á—ë—Ç–∞:\n\n"
        "1. –ó–∞–¥–∞—á–∞\n"
        "‚Äî –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\n\n"
        "2. –ó–∞–¥–∞—á–∞\n"
        "‚Äî –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")

async def save_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    text = update.message.text.strip()
    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    entry_type = user_states.get(user_id)

    file_name = get_excel()
    wb = load_workbook(file_name)
    ws = wb.active

    entries = re.findall(r"(\d+)\.\s*(.+?)\s*(?:‚Äî|-|:)\s*(.+)", text)
    if entries:
        for num, task, comment in entries:
            if comment.strip():
                ws.append([now, user.full_name, user.username, entry_type, num.strip(), task.strip(), comment.strip()])
            else:
                return await update.message.reply_text(f"‚ö†Ô∏è –í —Å—Ç—Ä–æ–∫–µ ‚Ññ{num} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.")
        wb.save(file_name)
        user_states.pop(user_id, None)
        return await update.message.reply_text("‚úÖ –ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –°–ø–∞—Å–∏–±–æ!")
    else:
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –ø–ª–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω: /template")
        return TYPING_PLAN

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_states.pop(user_id, None)
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_states[user_id] = "–û–¢–ß–Å–¢"
    await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –û–¢–ß–Å–¢ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞, –∫–∞–∫ –≤ —à–∞–±–ª–æ–Ω–µ. –ï—Å–ª–∏ –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –æ—Ç—á—ë—Ç —Å –ø–æ–º–µ—Ç–∫–æ–π ‚Äò–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ‚Äô.")
    return TYPING_PLAN

async def send_daily_plan(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=CHAT_ID, text=
        "üìå –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
        "1. –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–±—Ä–∞–Ω–∏–µ\n"
        "2. –†–∞–±–æ—Ç—ã –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ\n"
        "3. –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏\n"
        "4. –î–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç\n"
        "5. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –≤–µ—á–µ—Ä–æ–º")

async def send_report_reminder(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=CHAT_ID, text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –¥–æ 18:00!")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^üóì –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è$"), plan),
            MessageHandler(filters.Regex("^üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç$"), report)
        ],
        states={
            TYPING_PLAN: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_entry)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("template", template))
    app.add_handler(conv_handler)

    scheduler = BackgroundScheduler()
    scheduler.add_job(lambda: asyncio.run(send_daily_plan(app.bot)), trigger="cron", hour=7, minute=50)
    scheduler.add_job(lambda: asyncio.run(send_report_reminder(app.bot)), trigger="cron", hour=17, minute=0)
    scheduler.start()

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    app.run_polling()

if __name__ == "__main__":
    main()
